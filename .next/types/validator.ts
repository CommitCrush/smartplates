// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/(admin)/dashboard/manage-recipes/page.tsx
{
  const handler = {} as typeof import("../../src/app/(admin)/dashboard/manage-recipes/page.js")
  handler satisfies AppPageConfig<"/dashboard/manage-recipes">
}

// Validate ../../src/app/(admin)/dashboard/manage-users/[id]/page.tsx
{
  const handler = {} as typeof import("../../src/app/(admin)/dashboard/manage-users/[id]/page.js")
  handler satisfies AppPageConfig<"/dashboard/manage-users/[id]">
}

// Validate ../../src/app/(admin)/dashboard/manage_cookware_commissions/page.tsx
{
  const handler = {} as typeof import("../../src/app/(admin)/dashboard/manage_cookware_commissions/page.js")
  handler satisfies AppPageConfig<"/dashboard/manage_cookware_commissions">
}

// Validate ../../src/app/(admin)/dashboard/statistics/page.tsx
{
  const handler = {} as typeof import("../../src/app/(admin)/dashboard/statistics/page.js")
  handler satisfies AppPageConfig<"/dashboard/statistics">
}

// Validate ../../src/app/(admin)/page.tsx
{
  const handler = {} as typeof import("../../src/app/(admin)/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/(admin)/settings/page.tsx
{
  const handler = {} as typeof import("../../src/app/(admin)/settings/page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ../../src/app/(public)/about/page.tsx
{
  const handler = {} as typeof import("../../src/app/(public)/about/page.js")
  handler satisfies AppPageConfig<"/about">
}

// Validate ../../src/app/(public)/contact/page.tsx
{
  const handler = {} as typeof import("../../src/app/(public)/contact/page.js")
  handler satisfies AppPageConfig<"/contact">
}

// Validate ../../src/app/(public)/cookware/page.tsx
{
  const handler = {} as typeof import("../../src/app/(public)/cookware/page.js")
  handler satisfies AppPageConfig<"/cookware">
}

// Validate ../../src/app/(public)/login/page.tsx
{
  const handler = {} as typeof import("../../src/app/(public)/login/page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ../../src/app/(public)/recipe/page.tsx
{
  const handler = {} as typeof import("../../src/app/(public)/recipe/page.js")
  handler satisfies AppPageConfig<"/recipe">
}

// Validate ../../src/app/(public)/register/page.tsx
{
  const handler = {} as typeof import("../../src/app/(public)/register/page.js")
  handler satisfies AppPageConfig<"/register">
}

// Validate ../../src/app/(user)/dashboard/ai_feature/page.tsx
{
  const handler = {} as typeof import("../../src/app/(user)/dashboard/ai_feature/page.js")
  handler satisfies AppPageConfig<"/dashboard/ai_feature">
}

// Validate ../../src/app/(user)/dashboard/cookware/page.tsx
{
  const handler = {} as typeof import("../../src/app/(user)/dashboard/cookware/page.js")
  handler satisfies AppPageConfig<"/dashboard/cookware">
}

// Validate ../../src/app/(user)/dashboard/my_added_recipes/[id]/page.tsx
{
  const handler = {} as typeof import("../../src/app/(user)/dashboard/my_added_recipes/[id]/page.js")
  handler satisfies AppPageConfig<"/dashboard/my_added_recipes/[id]">
}

// Validate ../../src/app/(user)/dashboard/my_meal_plan/[id]/page.tsx
{
  const handler = {} as typeof import("../../src/app/(user)/dashboard/my_meal_plan/[id]/page.js")
  handler satisfies AppPageConfig<"/dashboard/my_meal_plan/[id]">
}

// Validate ../../src/app/(user)/dashboard/my_saved_meal_plan/page.tsx
{
  const handler = {} as typeof import("../../src/app/(user)/dashboard/my_saved_meal_plan/page.js")
  handler satisfies AppPageConfig<"/dashboard/my_saved_meal_plan">
}

// Validate ../../src/app/(user)/page.tsx
{
  const handler = {} as typeof import("../../src/app/(user)/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/(user)/profile/[id]/page.tsx
{
  const handler = {} as typeof import("../../src/app/(user)/profile/[id]/page.js")
  handler satisfies AppPageConfig<"/profile/[id]">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/(public)/page.jsx")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/api/admin/route.ts
{
  const handler = {} as typeof import("../../src/app/api/admin/route.js")
  handler satisfies RouteHandlerConfig<"/api/admin">
}

// Validate ../../src/app/api/auth/login/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/login/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/login">
}

// Validate ../../src/app/api/auth/logout/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/logout/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/logout">
}

// Validate ../../src/app/api/auth/register/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/register/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/register">
}

// Validate ../../src/app/api/recipes/[id]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/recipes/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/recipes/[id]">
}

// Validate ../../src/app/api/recipes/route.ts
{
  const handler = {} as typeof import("../../src/app/api/recipes/route.js")
  handler satisfies RouteHandlerConfig<"/api/recipes">
}

// Validate ../../src/app/api/users/[id]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/users/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/users/[id]">
}

// Validate ../../src/app/api/users/route.ts
{
  const handler = {} as typeof import("../../src/app/api/users/route.js")
  handler satisfies RouteHandlerConfig<"/api/users">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/(public)/layout.jsx")
  handler satisfies LayoutConfig<"/">
}
